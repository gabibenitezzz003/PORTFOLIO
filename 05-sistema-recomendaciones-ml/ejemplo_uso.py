"""
Ejemplo de Uso del Sistema de Recomendaciones ML
Demostraci√≥n de las funcionalidades del sistema de recomendaciones
"""
import asyncio
import pandas as pd
import numpy as np
from datetime import datetime
import structlog

from aplicacion.servicios.servicio_recomendaciones import ServicioRecomendaciones
from infraestructura.algoritmos.algoritmo_colaborativo import AlgoritmoColaborativo
from dominio.entidades.recomendacion import TipoAlgoritmo, TipoRecomendacion
from dominio.entidades.usuario import Usuario, TipoUsuario, Genero
from dominio.entidades.item import Item, CategoriaItem, EstadoItem


# Configurar logging
logger = structlog.get_logger()

def generar_datos_ejemplo():
    """Generar datos de ejemplo para el sistema"""
    print("üìä Generando datos de ejemplo...")
    
    # Generar datos de usuarios
    usuarios_data = {
        'id_usuario': [f'user_{i:03d}' for i in range(1, 101)],
        'email': [f'usuario{i}@ejemplo.com' for i in range(1, 101)],
        'nombre': [f'Usuario{i}' for i in range(1, 101)],
        'edad': np.random.randint(18, 65, 100),
        'genero': np.random.choice(['masculino', 'femenino', 'otro'], 100),
        'pais': np.random.choice(['Argentina', 'M√©xico', 'Colombia', 'Espa√±a'], 100),
        'fecha_registro': pd.date_range('2020-01-01', periods=100, freq='D')
    }
    
    usuarios_df = pd.DataFrame(usuarios_data)
    
    # Generar datos de items
    items_data = {
        'id_item': [f'item_{i:03d}' for i in range(1, 201)],
        'titulo': [f'Producto {i}' for i in range(1, 201)],
        'categoria': np.random.choice(['electronica', 'ropa', 'hogar', 'deportes', 'libros'], 200),
        'precio': np.random.uniform(10, 500, 200),
        'rating_promedio': np.random.uniform(1, 5, 200),
        'total_ratings': np.random.randint(0, 100, 200),
        'total_ventas': np.random.randint(0, 50, 200),
        'fecha_creacion': pd.date_range('2020-01-01', periods=200, freq='D')
    }
    
    items_df = pd.DataFrame(items_data)
    
    # Generar datos de ratings
    ratings_data = []
    for _ in range(1000):
        usuario_id = f'user_{np.random.randint(1, 101):03d}'
        item_id = f'item_{np.random.randint(1, 201):03d}'
        rating = np.random.randint(1, 6)
        fecha = pd.Timestamp.now() - pd.Timedelta(days=np.random.randint(0, 365))
        
        ratings_data.append({
            'usuario_id': usuario_id,
            'item_id': item_id,
            'rating': rating,
            'fecha': fecha
        })
    
    ratings_df = pd.DataFrame(ratings_data)
    
    print(f"   ‚Ä¢ Usuarios generados: {len(usuarios_df)}")
    print(f"   ‚Ä¢ Items generados: {len(items_df)}")
    print(f"   ‚Ä¢ Ratings generados: {len(ratings_df)}")
    
    return usuarios_df, items_df, ratings_df

async def configurar_servicios():
    """Configurar servicios de recomendaciones"""
    print("üîß Configurando servicios de recomendaciones...")
    
    # Crear servicio
    servicio_recomendaciones = ServicioRecomendaciones()
    
    # Crear algoritmo colaborativo
    algoritmo_colaborativo = AlgoritmoColaborativo()
    
    # Registrar algoritmo
    servicio_recomendaciones.registrar_algoritmo("colaborativo", algoritmo_colaborativo)
    
    print("‚úÖ Servicios configurados correctamente")
    
    return servicio_recomendaciones, algoritmo_colaborativo

async def ejemplo_entrenamiento(servicio_recomendaciones, algoritmo_colaborativo, ratings_df):
    """Ejemplo de entrenamiento del modelo"""
    print("\nü§ñ Ejemplo de Entrenamiento del Modelo")
    print("=" * 50)
    
    try:
        # Preparar datos de entrenamiento
        datos_entrenamiento = {
            'ratings': ratings_df
        }
        
        print("üìä Entrenando modelo colaborativo...")
        
        # Entrenar modelo
        metricas = await servicio_recomendaciones.entrenar_algoritmo(
            algoritmo="colaborativo",
            datos_entrenamiento=datos_entrenamiento
        )
        
        print("‚úÖ Modelo entrenado exitosamente")
        print(f"   ‚Ä¢ Varianza explicada: {metricas['varianza_explicada']:.3f}")
        print(f"   ‚Ä¢ Componentes: {metricas['n_components']}")
        print(f"   ‚Ä¢ Usuarios: {metricas['n_usuarios']}")
        print(f"   ‚Ä¢ Items: {metricas['n_items']}")
        print(f"   ‚Ä¢ Sparsity: {metricas['sparsity']:.3f}")
        print(f"   ‚Ä¢ Total ratings: {metricas['total_ratings']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en el entrenamiento: {str(e)}")
        return False

async def ejemplo_recomendaciones_usuario(servicio_recomendaciones):
    """Ejemplo de recomendaciones para usuario"""
    print("\nüë§ Ejemplo de Recomendaciones para Usuario")
    print("=" * 50)
    
    # Usuarios de ejemplo
    usuarios_ejemplo = ['user_001', 'user_050', 'user_100']
    
    for usuario_id in usuarios_ejemplo:
        print(f"\nüîç Generando recomendaciones para {usuario_id}")
        
        try:
            # Generar recomendaciones
            recomendaciones = await servicio_recomendaciones.recomendar_para_usuario(
                usuario_id=usuario_id,
                limit=5
            )
            
            print(f"   ‚Ä¢ Recomendaciones generadas: {len(recomendaciones)}")
            
            for i, rec in enumerate(recomendaciones, 1):
                print(f"   {i}. {rec.item_id} - Score: {rec.score:.3f} - Confianza: {rec.confianza:.3f}")
                if rec.explicacion:
                    print(f"      Explicaci√≥n: {rec.explicacion}")
                if rec.razones:
                    print(f"      Razones: {', '.join(rec.razones)}")
        
        except Exception as e:
            print(f"   ‚ùå Error: {str(e)}")

async def ejemplo_recomendaciones_similares(servicio_recomendaciones):
    """Ejemplo de recomendaciones similares"""
    print("\nüîó Ejemplo de Recomendaciones Similares")
    print("=" * 50)
    
    # Items de ejemplo
    items_ejemplo = ['item_001', 'item_050', 'item_100']
    
    for item_id in items_ejemplo:
        print(f"\nüîç Generando recomendaciones similares para {item_id}")
        
        try:
            # Generar recomendaciones similares
            recomendaciones = await servicio_recomendaciones.recomendar_similares(
                item_id=item_id,
                limit=3
            )
            
            print(f"   ‚Ä¢ Items similares encontrados: {len(recomendaciones)}")
            
            for i, rec in enumerate(recomendaciones, 1):
                print(f"   {i}. {rec.item_id} - Similitud: {rec.score:.3f} - Confianza: {rec.confianza:.3f}")
                if rec.explicacion:
                    print(f"      Explicaci√≥n: {rec.explicacion}")
        
        except Exception as e:
            print(f"   ‚ùå Error: {str(e)}")

async def ejemplo_comparacion_algoritmos(servicio_recomendaciones):
    """Ejemplo de comparaci√≥n de algoritmos"""
    print("\n‚öñÔ∏è Ejemplo de Comparaci√≥n de Algoritmos")
    print("=" * 50)
    
    usuario_id = 'user_001'
    print(f"üîç Comparando algoritmos para {usuario_id}")
    
    try:
        # Comparar algoritmos
        resultados = await servicio_recomendaciones.comparar_algoritmos(
            usuario_id=usuario_id,
            limit=3,
            algoritmos=['colaborativo']
        )
        
        for algoritmo, recomendaciones in resultados.items():
            print(f"\nüìä Algoritmo: {algoritmo}")
            print(f"   ‚Ä¢ Recomendaciones: {len(recomendaciones)}")
            
            for i, rec in enumerate(recomendaciones, 1):
                print(f"   {i}. {rec.item_id} - Score: {rec.score:.3f}")
    
    except Exception as e:
        print(f"‚ùå Error en comparaci√≥n: {str(e)}")

async def ejemplo_evaluacion_modelo(servicio_recomendaciones, ratings_df):
    """Ejemplo de evaluaci√≥n del modelo"""
    print("\nüìà Ejemplo de Evaluaci√≥n del Modelo")
    print("=" * 50)
    
    try:
        # Preparar datos de test (usar una muestra de los ratings)
        datos_test = {
            'ratings': ratings_df.sample(100)  # Muestra de 100 ratings
        }
        
        print("üìä Evaluando modelo colaborativo...")
        
        # Evaluar modelo
        metricas = await servicio_recomendaciones.evaluar_algoritmo(
            algoritmo="colaborativo",
            datos_test=datos_test,
            metricas=['precision', 'recall', 'f1_score', 'coverage', 'diversity']
        )
        
        print("‚úÖ Evaluaci√≥n completada")
        print(f"   ‚Ä¢ Precision: {metricas['precision']:.3f}")
        print(f"   ‚Ä¢ Recall: {metricas['recall']:.3f}")
        print(f"   ‚Ä¢ F1-Score: {metricas['f1_score']:.3f}")
        print(f"   ‚Ä¢ Coverage: {metricas['coverage']:.3f}")
        print(f"   ‚Ä¢ Diversity: {metricas['diversity']:.3f}")
    
    except Exception as e:
        print(f"‚ùå Error en evaluaci√≥n: {str(e)}")

async def ejemplo_estadisticas(servicio_recomendaciones):
    """Ejemplo de estad√≠sticas del sistema"""
    print("\nüìä Ejemplo de Estad√≠sticas del Sistema")
    print("=" * 50)
    
    try:
        # Obtener estad√≠sticas generales
        estadisticas = await servicio_recomendaciones.obtener_estadisticas()
        
        print("üìà Estad√≠sticas del Sistema:")
        print(f"   ‚Ä¢ Algoritmos disponibles: {', '.join(estadisticas['algoritmos_disponibles'])}")
        print(f"   ‚Ä¢ Algoritmo por defecto: {estadisticas['configuracion']['algoritmo_por_defecto']}")
        print(f"   ‚Ä¢ M√°ximo de recomendaciones: {estadisticas['configuracion']['max_recomendaciones']}")
        print(f"   ‚Ä¢ Confianza m√≠nima: {estadisticas['configuracion']['min_confianza']}")
        print(f"   ‚Ä¢ Cach√© habilitado: {estadisticas['configuracion']['cache_habilitado']}")
        
        # Obtener estad√≠sticas espec√≠ficas de usuario
        estadisticas_usuario = await servicio_recomendaciones.obtener_estadisticas(usuario_id='user_001')
        
        print(f"\nüë§ Estad√≠sticas para user_001:")
        print(f"   ‚Ä¢ Algoritmo preferido: {estadisticas_usuario['usuario']['algoritmo_preferido']}")
    
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas: {str(e)}")

async def ejemplo_entidades_dominio():
    """Ejemplo de entidades del dominio"""
    print("\nüèóÔ∏è Ejemplo de Entidades del Dominio")
    print("=" * 50)
    
    # Crear usuario de ejemplo
    usuario = Usuario(
        id_usuario="user_ejemplo",
        email="ejemplo@test.com",
        nombre="Usuario",
        apellido="Ejemplo",
        edad=30,
        genero=Genero.MASCULINO,
        pais="Argentina",
        ciudad="Buenos Aires",
        tipo_usuario=TipoUsuario.ACTIVO
    )
    
    print("üë§ Usuario creado:")
    print(f"   ‚Ä¢ ID: {usuario.id_usuario}")
    print(f"   ‚Ä¢ Email: {usuario.email}")
    print(f"   ‚Ä¢ Nombre completo: {usuario.nombre} {usuario.apellido}")
    print(f"   ‚Ä¢ Edad: {usuario.edad}")
    print(f"   ‚Ä¢ G√©nero: {usuario.genero.value}")
    print(f"   ‚Ä¢ Ubicaci√≥n: {usuario.ciudad}, {usuario.pais}")
    print(f"   ‚Ä¢ Tipo: {usuario.tipo_usuario.value}")
    print(f"   ‚Ä¢ D√≠as de registro: {usuario.calcular_dias_registro()}")
    print(f"   ‚Ä¢ Nivel de actividad: {usuario.calcular_nivel_actividad()}")
    print(f"   ‚Ä¢ Valor del usuario: {usuario.calcular_valor_usuario():.3f}")
    
    # Crear item de ejemplo
    item = Item(
        id_item="item_ejemplo",
        titulo="Producto de Ejemplo",
        descripcion="Un producto de ejemplo para demostraci√≥n",
        categoria=CategoriaItem.ELECTRONICA,
        precio=299.99,
        precio_original=399.99,
        descuento=100.00,
        stock=50,
        estado=EstadoItem.ACTIVO,
        rating_promedio=4.5,
        total_ratings=25,
        total_ventas=100,
        total_vistas=500
    )
    
    print(f"\nüì¶ Item creado:")
    print(f"   ‚Ä¢ ID: {item.id_item}")
    print(f"   ‚Ä¢ T√≠tulo: {item.titulo}")
    print(f"   ‚Ä¢ Categor√≠a: {item.categoria.value}")
    print(f"   ‚Ä¢ Precio: ${item.precio:.2f}")
    print(f"   ‚Ä¢ Descuento: {item.calcular_porcentaje_descuento():.1f}%")
    print(f"   ‚Ä¢ Stock: {item.stock}")
    print(f"   ‚Ä¢ Estado: {item.estado.value}")
    print(f"   ‚Ä¢ Rating: {item.rating_promedio}/5 ({item.total_ratings} rese√±as)")
    print(f"   ‚Ä¢ Popularidad: {item.calcular_popularidad():.3f}")
    print(f"   ‚Ä¢ Nivel de precio: {item.obtener_nivel_precio()}")
    print(f"   ‚Ä¢ Nivel de rating: {item.obtener_nivel_rating()}")
    
    # Crear recomendaci√≥n de ejemplo
    from dominio.entidades.recomendacion import Recomendacion, TipoAlgoritmo, TipoRecomendacion
    
    recomendacion = Recomendacion(
        item_id="item_ejemplo",
        usuario_id="user_ejemplo",
        score=4.2,
        ranking=1,
        algoritmo_usado=TipoAlgoritmo.COLABORATIVO,
        tipo_recomendacion=TipoRecomendacion.USUARIO,
        titulo="Producto de Ejemplo",
        categoria="electronica",
        precio=299.99,
        explicacion="Recomendado basado en usuarios similares",
        razones=["Basado en usuarios con gustos similares", "Patrones de comportamiento compartidos"],
        confianza=0.85
    )
    
    print(f"\nüéØ Recomendaci√≥n creada:")
    print(f"   ‚Ä¢ Item: {recomendacion.item_id}")
    print(f"   ‚Ä¢ Usuario: {recomendacion.usuario_id}")
    print(f"   ‚Ä¢ Score: {recomendacion.score}")
    print(f"   ‚Ä¢ Ranking: {recomendacion.ranking}")
    print(f"   ‚Ä¢ Algoritmo: {recomendacion.algoritmo_usado.value}")
    print(f"   ‚Ä¢ Tipo: {recomendacion.tipo_recomendacion.value}")
    print(f"   ‚Ä¢ Confianza: {recomendacion.confianza:.3f}")
    print(f"   ‚Ä¢ Nivel de confianza: {recomendacion.obtener_nivel_confianza()}")
    print(f"   ‚Ä¢ Explicaci√≥n: {recomendacion.obtener_explicacion_completa()}")
    print(f"   ‚Ä¢ Relevancia: {recomendacion.calcular_relevancia():.3f}")
    print(f"   ‚Ä¢ V√°lida: {recomendacion.es_valida()}")

async def main():
    """Funci√≥n principal"""
    print("üéØ Sistema de Recomendaciones ML - Ejemplo de Uso")
    print("=" * 60)
    
    try:
        # Generar datos de ejemplo
        usuarios_df, items_df, ratings_df = generar_datos_ejemplo()
        
        # Configurar servicios
        servicio_recomendaciones, algoritmo_colaborativo = await configurar_servicios()
        
        # Ejecutar ejemplos
        await ejemplo_entidades_dominio()
        
        # Entrenar modelo
        entrenamiento_exitoso = await ejemplo_entrenamiento(servicio_recomendaciones, algoritmo_colaborativo, ratings_df)
        
        if entrenamiento_exitoso:
            await ejemplo_recomendaciones_usuario(servicio_recomendaciones)
            await ejemplo_recomendaciones_similares(servicio_recomendaciones)
            await ejemplo_comparacion_algoritmos(servicio_recomendaciones)
            await ejemplo_evaluacion_modelo(servicio_recomendaciones, ratings_df)
        
        await ejemplo_estadisticas(servicio_recomendaciones)
        
        print("\n‚úÖ Todos los ejemplos ejecutados correctamente!")
        print("\nüöÄ Para usar la API REST, ejecuta:")
        print("   python -m presentacion.api.aplicacion")
        print("   Luego visita: http://localhost:8000/docs")
        
        print("\nüìä Servicios disponibles:")
        print("   ‚Ä¢ API REST: http://localhost:8000")
        print("   ‚Ä¢ Dashboard: http://localhost:8501")
        print("   ‚Ä¢ MLflow: http://localhost:5000")
        print("   ‚Ä¢ Grafana: http://localhost:3000")
        print("   ‚Ä¢ Prometheus: http://localhost:9090")
        
    except Exception as e:
        print(f"\n‚ùå Error en la ejecuci√≥n: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
