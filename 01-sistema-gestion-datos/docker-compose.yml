# Docker Compose para Sistema de Gestión de Datos
# Orquestación de servicios con PostgreSQL y FastAPI

version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sistema_gestion_datos_postgres
    environment:
      POSTGRES_DB: sistema_gestion_datos
      POSTGRES_USER: usuario
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=es_ES.UTF-8 --lc-ctype=es_ES.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - sistema_red
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U usuario -d sistema_gestion_datos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación FastAPI
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sistema_gestion_datos_api
    environment:
      # Base de datos
      DATABASE_URL: postgresql://usuario:password123@postgres:5432/sistema_gestion_datos
      
      # Seguridad
      SECRET_KEY: clave-secreta-para-desarrollo-cambiar-en-produccion
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Aplicación
      APP_NAME: Sistema de Gestión de Datos
      APP_VERSION: 1.0.0
      DEBUG: "true"
      
      # CORS
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://localhost:8080"]'
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sistema_red
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: sistema_gestion_datos_redis
    ports:
      - "6379:6379"
    networks:
      - sistema_red
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: sistema_gestion_datos_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - sistema_red
    restart: unless-stopped

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local

# Red personalizada
networks:
  sistema_red:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
