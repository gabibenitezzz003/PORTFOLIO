version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: notificaciones_postgres
    environment:
      POSTGRES_DB: notificaciones
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - notificaciones_red
    restart: unless-stopped

  # Redis para cache y pub/sub
  redis:
    image: redis:7-alpine
    container_name: notificaciones_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - notificaciones_red
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MongoDB para notificaciones históricas
  mongodb:
    image: mongo:7
    container_name: notificaciones_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: notificaciones
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - notificaciones_red
    restart: unless-stopped

  # Aplicación Go
  app:
    build: .
    container_name: notificaciones_app
    ports:
      - "8080:8080"
    environment:
      - MODO=desarrollo
      - PUERTO=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=notificaciones
      - DB_USER=admin
      - DB_PASSWORD=admin123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_DATABASE=notificaciones
      - MONGODB_USERNAME=admin
      - MONGODB_PASSWORD=admin123
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - notificaciones_red
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx como proxy reverso
  nginx:
    image: nginx:alpine
    container_name: notificaciones_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    networks:
      - notificaciones_red
    restart: unless-stopped

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: notificaciones_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - notificaciones_red
    restart: unless-stopped

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: notificaciones_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - notificaciones_red
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  notificaciones_red:
    driver: bridge
