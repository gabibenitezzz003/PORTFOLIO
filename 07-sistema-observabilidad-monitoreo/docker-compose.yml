version: '3.8'

services:
  # Aplicación de Observabilidad
  app:
    build: .
    container_name: observabilidad_app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=produccion
      - PUERTO=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=14268
      - PROMETHEUS_HOST=prometheus
      - PROMETHEUS_PORT=9090
    depends_on:
      - redis
      - elasticsearch
      - jaeger
      - prometheus
    networks:
      - observabilidad_red
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: observabilidad_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - observabilidad_red
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Elasticsearch para logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: observabilidad_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - observabilidad_red
    restart: unless-stopped

  # Kibana para visualización de logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: observabilidad_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - observabilidad_red
    restart: unless-stopped

  # Logstash para procesamiento de logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: observabilidad_logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
    depends_on:
      - elasticsearch
    networks:
      - observabilidad_red
    restart: unless-stopped

  # Jaeger para distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: observabilidad_jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - observabilidad_red
    restart: unless-stopped

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: observabilidad_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - observabilidad_red
    restart: unless-stopped

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: observabilidad_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - observabilidad_red
    restart: unless-stopped

  # AlertManager para alertas
  alertmanager:
    image: prom/alertmanager:latest
    container_name: observabilidad_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - observabilidad_red
    restart: unless-stopped

  # Node Exporter para métricas del sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: observabilidad_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - observabilidad_red
    restart: unless-stopped

volumes:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  observabilidad_red:
    driver: bridge
