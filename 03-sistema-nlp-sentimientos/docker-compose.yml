# Docker Compose para Sistema NLP
# Orquestación de servicios para análisis de sentimientos y entidades

version: '3.8'

services:
  # API principal de NLP
  api-nlp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sistema_nlp_api
    environment:
      # Configuración de la API
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_WORKERS: 4
      
      # Base de datos
      DATABASE_URL: postgresql://usuario:password@postgres:5432/nlp_sentimientos
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Modelos de spaCy
      SPACY_MODELS: es_core_news_sm,en_core_web_sm,fr_core_news_sm,de_core_news_sm
      
      # Configuración de análisis
      SENTIMENT_MODEL: spacy
      ENTITY_MODEL: spacy
      CACHE_TTL: 3600
      
      # Logging
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    volumes:
      - ./modelos:/app/modelos
      - ./datos:/app/datos
      - ./logs:/app/logs
    networks:
      - nlp_red
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: nlp_postgres
    environment:
      POSTGRES_DB: nlp_sentimientos
      POSTGRES_USER: usuario
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - nlp_red
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U usuario -d nlp_sentimientos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para caché
  redis:
    image: redis:7-alpine
    container_name: nlp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nlp_red
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Dashboard Streamlit
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nlp_dashboard
    environment:
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_HEADLESS: true
      API_URL: http://api-nlp:8000
    ports:
      - "8501:8501"
    volumes:
      - ./dashboard:/app/dashboard
      - ./datos:/app/datos
    networks:
      - nlp_red
    restart: unless-stopped
    depends_on:
      - api-nlp
    command: ["streamlit", "run", "dashboard/app.py", "--server.port=8501", "--server.address=0.0.0.0"]

  # Nginx para proxy reverso
  nginx:
    image: nginx:alpine
    container_name: nlp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - nlp_red
    restart: unless-stopped
    depends_on:
      - api-nlp
      - dashboard

  # Worker para procesamiento en background
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nlp_worker
    environment:
      # Configuración del worker
      WORKER_TYPE: background
      WORKER_QUEUE: nlp_tasks
      
      # Base de datos
      DATABASE_URL: postgresql://usuario:password@postgres:5432/nlp_sentimientos
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Modelos
      SPACY_MODELS: es_core_news_sm,en_core_web_sm
    volumes:
      - ./modelos:/app/modelos
      - ./datos:/app/datos
      - ./logs:/app/logs
    networks:
      - nlp_red
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    command: ["python", "-m", "worker.main"]

  # Monitor de salud
  healthcheck:
    image: curlimages/curl:latest
    container_name: nlp_healthcheck
    depends_on:
      - api-nlp
      - postgres
      - redis
    networks:
      - nlp_red
    command: |
      sh -c '
        echo "Verificando servicios..."
        curl -f http://api-nlp:8000/health || exit 1
        echo "Todos los servicios están funcionando"
      '
    restart: "no"

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Red personalizada
networks:
  nlp_red:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
